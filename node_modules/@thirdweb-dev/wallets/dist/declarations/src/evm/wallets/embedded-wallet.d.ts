import { AuthParams, EmbeddedWalletAdditionalOptions, EmbeddedWalletConnectionArgs } from "../connectors/embedded-wallet/types";
import { ConnectParams, Connector } from "../interfaces/connector";
import { AbstractClientWallet, WalletOptions } from "./base";
export type EmbeddedWalletOptions = WalletOptions<EmbeddedWalletAdditionalOptions>;
export type { AuthParams, AuthResult, EmbeddedWalletAdditionalOptions, EmbeddedWalletConnectionArgs, EmbeddedWalletOauthStrategy, } from "../connectors/embedded-wallet/types";
export declare class EmbeddedWallet extends AbstractClientWallet<EmbeddedWalletAdditionalOptions, EmbeddedWalletConnectionArgs> {
    connector?: Connector;
    static id: string;
    static meta: {
        name: string;
        iconURL: string;
    };
    /**
     * Sends a verification email to the provided email address.
     *
     * @param email - The email address to which the verification email will be sent.
     * @param clientId - Your thirdweb client ID
     * @returns Information on the user's status and whether they are a new user.
     *
     * @example
     * ```typescript
     * sendVerificationEmail({ email: 'test@example.com', clientId: 'yourClientId' })
     *   .then(() => console.log('Verification email sent successfully.'))
     *   .catch(error => console.error('Failed to send verification email:', error));
     * ```
     */
    static sendVerificationEmail(options: {
        email: string;
        clientId: string;
    }): Promise<import("..").SendEmailOtpReturnType>;
    get walletName(): "Embedded Wallet";
    chain: EmbeddedWalletAdditionalOptions["chain"];
    constructor(options: EmbeddedWalletOptions);
    protected getConnector(): Promise<Connector>;
    autoConnect(connectOptions?: ConnectParams<EmbeddedWalletConnectionArgs> | undefined): Promise<string>;
    getConnectParams(): ConnectParams<EmbeddedWalletConnectionArgs> | undefined;
    getEmail(): Promise<string | undefined>;
    getEmbeddedWalletSDK(): Promise<import("..").EmbeddedWalletSdk>;
    getRecoveryInformation(): Promise<import("..").AuthDetails>;
    sendVerificationEmail({ email }: {
        email: string;
    }): Promise<import("..").SendEmailOtpReturnType>;
    authenticate(params: AuthParams): Promise<import("../connectors/embedded-wallet/types").AuthResult>;
    getLastUsedAuthStrategy(): Promise<AuthParams["strategy"] | null>;
}
//# sourceMappingURL=embedded-wallet.d.ts.map