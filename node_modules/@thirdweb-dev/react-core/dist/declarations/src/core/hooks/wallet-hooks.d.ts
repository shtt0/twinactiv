import type { BloctoWallet, Coin98Wallet, CoinbaseWallet, CoreWallet, CryptoDefiWallet, EmbeddedWallet, FrameWallet, LocalWallet, MagicLink, MetaMaskWallet, OKXWallet, PaperWallet, PhantomWallet, RabbyWallet, RainbowWallet, SafeWallet, SmartWallet, TokenBoundSmartWallet, TrustWallet, WalletConnect, walletIds } from "@thirdweb-dev/wallets";
import { WalletInstance } from "../types/wallet";
export type WalletId = (typeof walletIds)[keyof typeof walletIds];
type WalletIdToWalletTypeMap = {
    metamask: MetaMaskWallet;
    coin98: Coin98Wallet;
    coinbase: CoinbaseWallet;
    coreWallet: CoreWallet;
    rainbowWallet: RainbowWallet;
    blocto: BloctoWallet;
    frame: FrameWallet;
    localWallet: LocalWallet;
    magicLink: MagicLink;
    paper: PaperWallet;
    smartWallet: SmartWallet;
    tokenBoundSmartWallet: TokenBoundSmartWallet;
    safe: SafeWallet;
    trust: TrustWallet;
    embeddedWallet: EmbeddedWallet;
    walletConnect: WalletConnect;
    phantom: PhantomWallet;
    walletConnectV1: WalletConnect;
    okx: OKXWallet;
    cryptoDefiWallet: CryptoDefiWallet;
    rabby: RabbyWallet;
};
/**
 * @returns the current active wallet instance
 */
export declare function useWallet<T extends WalletId>(walletId: T): WalletIdToWalletTypeMap[T] | undefined;
export declare function useWallet(): WalletInstance | undefined;
/**
 * @returns the current active wallet's configuration object
 */
export declare function useWalletConfig(): import("../types/wallet").WalletConfig | undefined;
/**
 *
 * @returns `supportedWallets` configured in the `<ThirdwebProvider/>`
 */
export declare function useWallets(): import("../types/wallet").WalletConfig[];
/**
 *
 * @returns a method to connect to a wallet class
 */
export declare function useConnect(): <I extends WalletInstance>(...args: undefined extends Parameters<I["connect"]>[0] ? [wallet: import("../types/wallet").WalletConfig<I>, connectParams?: (Parameters<I["connect"]>[0] extends infer T ? T extends Parameters<I["connect"]>[0] ? T extends null | undefined ? never : T : never : never) | undefined] : [wallet: import("../types/wallet").WalletConfig<I>, connectParams: Parameters<I["connect"]>[0] extends infer T_1 ? T_1 extends Parameters<I["connect"]>[0] ? T_1 extends null | undefined ? never : T_1 : never : never]) => Promise<I>;
/**
 *
 * @returns a method to disconnect from the current active wallet
 */
export declare function useDisconnect(): () => Promise<void>;
/**
 *
 * @returns the connection status of the wallet
 *
 * It can be one of the following:
 * 1. `unknown` - when wallet connection status is not yet known
 * 2. `connecting` - when wallet is connecting
 * 3. `connected` - when wallet is connected
 * 4. `disconnected` - when wallet is disconnected
 *
 */
export declare function useConnectionStatus(): "unknown" | "connected" | "disconnected" | "connecting";
/**
 *
 * @returns a method to create an instance of given wallet class
 */
export declare function useSetConnectionStatus(): (status: "unknown" | "connected" | "disconnected" | "connecting") => void;
/**
 *
 * @returns a method to create an instance of given wallet class
 */
export declare function useCreateWalletInstance(): <I extends WalletInstance>(Wallet: import("../types/wallet").WalletConfig<I>) => I;
/**
 *
 * @returns a method to connect the wallet to network/chain with given chainId
 */
export declare function useSwitchChain(): (chain: number) => Promise<void>;
/**
 *
 * @returns a method to set a connected wallet instance
 */
export declare function useSetConnectedWallet(): (wallet: WalletInstance, params?: import("@thirdweb-dev/wallets").ConnectParams<Record<string, any>> | undefined) => Promise<void>;
export {};
//# sourceMappingURL=wallet-hooks.d.ts.map