export { A as APPROVED_IMPLEMENTATIONS, C as ContractDeployer, L as LOCAL_NODE_PKEY, S as SUPPORTED_CHAIN_IDS, T as ThirdwebSDK, U as UserWallet, c as checkClientIdOrSecretKey, d as checkVerificationStatus, f as computeCloneFactoryAddress, s as convertParamValues, k as deployCreate2Factory, l as directDeployDeterministic, n as directDeployDeterministicPublished, m as directDeployDeterministicWithUri, e as extractFunctionParamsFromAbi, a as getAllDetectedExtensionNames, g as getAllDetectedFeatureNames, w as getApprovedImplementation, x as getDefaultTrustedForwarders, t as getDeployArguments, j as getEncodedConstructorParamsForThirdwebContract, h as getThirdwebContractAddress, u as getTrustedForwarders, i as isVerifiedOnEtherscan, o as predictAddressDeterministic, r as predictAddressDeterministicPublished, q as predictAddressDeterministicWithUri, p as predictThirdwebContractAddress, b as verify, v as verifyThirdwebPrebuiltImplementation } from './sdk-ee4eceac.esm.js';
export { G as ALL_ROLES, bm as AbiObjectSchema, bn as AbiSchema, bl as AbiTypeSchema, bd as AddressOrEnsSchema, bc as AddressSchema, v as AdminRoleMissingError, A as AssetNotFoundError, t as AuctionAlreadyStartedError, w as AuctionHasNotEndedError, bg as BYOCContractMetadataSchema, b9 as BigNumberSchema, bb as BigNumberTransformSchema, ba as BigNumberishSchema, av as COMMON_FACTORY, C as CONTRACTS_MAP, aS as CONTRACT_ADDRESSES, at as CREATE2_FACTORY_BYTECODE, be as CallOverrideSchema, aW as ChainId, bp as ChainIdToAddressSchema, bG as CommonContractOutputSchema, bF as CommonContractSchema, bJ as CommonPlatformFeeSchema, bI as CommonPrimarySaleSchema, bH as CommonRoyaltySchema, bL as CommonSymbolSchema, bK as CommonTrustedForwarderSchema, bD as CompilerMetadataFetchedSchema, bC as ContractInfoSchema, bj as CustomContractDeploy, bh as CustomContractInput, bi as CustomContractOutput, bk as CustomContractSchema, bq as CustomFactoryInput, ay as DEPLOYER_ABI, ax as DEPLOYER_BYTECODE, bs as DeployTypeInput, bu as DeploymentNetworkInput, bY as DropErc1155ContractDeploy, bW as DropErc1155ContractInput, bX as DropErc1155ContractOutput, bZ as DropErc1155ContractSchema, bU as DropErc721ContractDeploy, bS as DropErc721ContractInput, bT as DropErc721ContractOutput, bV as DropErc721ContractSchema, D as DuplicateFileNameError, s as DuplicateLeafsError, E as EditionDropInitializer, a as EditionInitializer, b1 as EventType, x as ExtensionNotImplementedError, bv as ExtraPublishMetadataSchemaInput, bw as ExtraPublishMetadataSchemaOutput, br as FactoryDeploymentSchema, r as FetchError, F as FileNameMissingError, bx as FullPublishMetadataSchemaInput, by as FullPublishMetadataSchemaOutput, u as FunctionDeprecatedError, aw as GAS_LIMIT_FOR_DEPLOYER, I as InvalidAddressError, b0 as LINK_TOKEN_ADDRESS, L as ListingNotFoundError, c0 as MarketplaceContractDeploy, b_ as MarketplaceContractInput, b$ as MarketplaceContractOutput, c1 as MarketplaceContractSchema, M as MarketplaceInitializer, b as MarketplaceV3Initializer, bM as MerkleSchema, q as MissingOwnerRoleError, o as MissingRoleError, c as MultiwrapInitializer, a_ as NATIVE_TOKENS, aZ as NATIVE_TOKEN_ADDRESS, N as NFTCollectionInitializer, d as NFTDropInitializer, p as NotEnoughTokensError, n as NotFoundError, aR as OZ_DEFENDER_FORWARDER_ADDRESS, i as PREBUILT_CONTRACTS_APPURI_MAP, h as PREBUILT_CONTRACTS_MAP, c4 as PackContractDeploy, c2 as PackContractInput, c3 as PackContractOutput, c5 as PackContractSchema, P as PackInitializer, bo as PreDeployMetadata, bE as PreDeployMetadataFetchedSchema, bz as ProfileSchemaInput, bA as ProfileSchemaOutput, cs as ProposalOutputSchema, bB as PublishedContractSchema, Q as QuantityAboveLimitError, R as RestrictedTransferError, bt as RouterTypeInput, bf as SDKOptionsSchema, au as SIGNATURE, b8 as SUPPORTED_FEATURES, e as SignatureDropInitializer, bN as SnapshotEntryInput, bP as SnapshotEntryWithProofSchema, bR as SnapshotInfoSchema, bO as SnapshotInputSchema, bQ as SnapshotSchema, f as SplitInitializer, c8 as SplitsContractDeploy, c6 as SplitsContractInput, c7 as SplitsContractOutput, c9 as SplitsContractSchema, S as StaticJsonRpcBatchProvider, aL as THIRDWEB_DEPLOYER, T as TokenDropInitializer, ck as TokenErc1155ContractDeploy, ci as TokenErc1155ContractInput, cj as TokenErc1155ContractOutput, cl as TokenErc1155ContractSchema, cc as TokenErc20ContractDeploy, ca as TokenErc20ContractInput, cb as TokenErc20ContractOutput, cd as TokenErc20ContractSchema, cg as TokenErc721ContractDeploy, ce as TokenErc721ContractInput, cf as TokenErc721ContractOutput, ch as TokenErc721ContractSchema, g as TokenInitializer, y as TransactionError, U as UploadError, cq as VoteContractDeploy, co as VoteContractInput, cp as VoteContractOutput, cr as VoteContractSchema, V as VoteInitializer, cm as VoteSettingsInputSchema, cn as VoteSettingsOuputSchema, W as WrongListingTypeError, aE as computeDeploymentAddress, aI as computeDeploymentInfo, aF as computeEOAForwarderAddress, aG as computeForwarderAddress, aj as constructAbiFromBytecode, af as detectFeatures, ag as detectFeaturesFromBytecode, aJ as encodeConstructorParamsForImplementation, a4 as extractCommentFromMetadata, a5 as extractConstructorParamsFromAbi, a6 as extractFunctionsFromAbi, ab as extractIPFSHashFromBytecode, a7 as extractMinimalProxyImplementationAddress, X as fetchAbiFromAddress, aN as fetchAndCacheDeployMetadata, a0 as fetchContractMetadata, K as fetchContractMetadataFromAddress, O as fetchContractMetadataFromBytecode, ae as fetchExtendedReleaseMetadata, ad as fetchPreDeployMetadata, aM as fetchPublishedContractFromPolygon, ac as fetchRawPredeployMetadata, as as fetchSourceFilesFromMetadata, a1 as formatCompilerMetadata, ak as getAllDetectedExtensions, ai as getAllDetectedExtensionsFromBytecode, ah as getAllDetectedFeatures, b3 as getChainIdFromNetwork, b4 as getChainIdOrName, b2 as getChainProvider, ao as getCompositeABI, aT as getContractAddressByChainId, J as getContractMetadataFromCache, k as getContractName, aU as getContractPublisherAddress, j as getContractTypeForRemoteName, aB as getCreate2FactoryAddress, aK as getCreate2FactoryDeploymentInfo, Y as getDefaultGasOverrides, Z as getDynamicFeeData, _ as getGasPrice, aD as getInitBytecodeWithSalt, aH as getKeylessTxn, aV as getMultichainRegistryAddress, a$ as getNativeTokenByChainId, $ as getPolygonGasPriorityFee, b6 as getProviderFromRpcUrl, H as getRoleHash, aC as getSaltHash, b7 as getSignerAndProvider, aY as getSupportedChains, a2 as hasMatchingAbi, B as includesErrorMessage, b5 as isChainConfig, az as isContractDeployed, ar as isDowngradeVersion, aA as isEIP155Enforced, am as isExtensionEnabled, al as isFeatureEnabled, aq as isIncrementalVersion, l as isProvider, m as isSigner, an as joinABIs, a3 as matchesAbiFromBytecode, z as parseRevertReason, aP as resolveAddress, a9 as resolveContractUriAndBytecode, a8 as resolveContractUriFromAddress, aO as resolveEns, aa as resolveImplementation, aX as setSupportedChains, aQ as signTypedDataInternal, ap as toSemver } from './index-6218994c.esm.js';
export { C as ContractEncoder, f as fetchCurrencyMetadata, a as fetchCurrencyValue, i as isNativeToken } from './fetchCurrencyValue-b3073e34.esm.js';
export { c as cleanCurrencyAddress } from './cleanCurrencyAddress-4ab6de61.esm.js';
export { n as normalizePriceValue } from './normalizePriceValue-93d712e2.esm.js';
export { s as setErc20Allowance } from './setErc20Allowance-eeb7d145.esm.js';
export { B as BaseSignaturePayloadInput, g as ClaimConditionInputArray, e as ClaimConditionInputSchema, d as ClaimConditionMetadataSchema, h as ClaimConditionOutputSchema, C as ClaimEligibility, i as CurrencySchema, j as CurrencyValueSchema, G as GenericRequest, t as MintRequest1155, M as MintRequest20, s as MintRequest721, u as MintRequest721withQuantity, P as PartialClaimConditionInputSchema, n as Signature1155PayloadInput, o as Signature1155PayloadInputWithTokenId, p as Signature1155PayloadOutput, S as Signature20PayloadInput, k as Signature20PayloadOutput, l as Signature721PayloadInput, m as Signature721PayloadOutput, q as Signature721WithQuantityInput, r as Signature721WithQuantityOutput, a as approveErc20Allowance, c as convertToReadableQuantity, b as createSnapshot, f as fetchSnapshotEntryForAddress } from './signature-6dc55176.esm.js';
export { h as hasERC20Allowance } from './hasERC20Allowance-2858dc6f.esm.js';
export { f as Erc20, E as Erc20BatchMintable, a as Erc20Burnable, b as Erc20ClaimableWithConditions, c as Erc20Droppable, d as Erc20Mintable, e as Erc20SignatureMintable, n as normalizeAmount } from './erc-20-50544a8f.esm.js';
export { h as EditionMetadataInputOrUriSchema, f as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, e as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, c as computeNativeTokenAddress, d as deployContractDeterministicRaw, g as getCachedAbiForContract, m as matchesPrebuiltAbi, b as toDisplayValue, t as toEther, a as toUnits } from './token-969e8020.esm.js';
export { h as Erc721, E as Erc721BatchMintable, j as Erc721Burnable, b as Erc721Claimable, a as Erc721ClaimableWithConditions, f as Erc721Enumerable, c as Erc721LazyMintable, d as Erc721Mintable, e as Erc721Supply, g as Erc721TieredDrop, i as Erc721WithQuantitySignatureMintable, t as toWei } from './erc-721-860e61d9.esm.js';
export { P as PAPER_API_URL, a as PaperCheckout, c as createCheckoutLinkIntent, f as fetchRegisteredCheckoutId, p as parseChainIdToPaperChain } from './thirdweb-checkout-2c22b669.esm.js';
export { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-d511595a.esm.js';
export { b as ContractAppURI, a as ContractEvents, C as ContractMetadata, G as GasCostEstimator, d as detectContractFeature, h as hasFunction } from './contract-appuri-8a6d4b9c.esm.js';
export { C as ContractRoles } from './contract-roles-1ff96d0c.esm.js';
export { a as ContractOwner, C as ContractRoyalty, D as DelayedReveal } from './contract-owner-13d95b59.esm.js';
export { C as ContractPrimarySale } from './contract-sales-4dedaf72.esm.js';
export { D as DropClaimConditions } from './drop-claim-conditions-b3e198b3.esm.js';
export { D as DropErc1155ClaimConditions, e as Erc1155, E as Erc1155BatchMintable, a as Erc1155Burnable, b as Erc1155Enumerable, c as Erc1155LazyMintable, d as Erc1155Mintable, f as Erc1155SignatureMintable } from './erc-1155-a50e3265.esm.js';
export { D as DropErc1155History } from './drop-erc1155-history-2313cfe9.esm.js';
export { T as TokenERC20History } from './erc-20-history-ccf5d31b.esm.js';
export { S as StandardErc20 } from './erc-20-standard-059d11a5.esm.js';
export { S as StandardErc721 } from './erc-721-standard-dd0ea799.esm.js';
export { S as StandardErc1155 } from './erc-1155-standard-f4c76d54.esm.js';
export { L as ListingType, a as MarketplaceAuction, M as MarketplaceDirect } from './marketplace-auction-bf187fd5.esm.js';
export { M as MarketplaceV3DirectListings, a as MarketplaceV3EnglishAuctions, b as MarketplaceV3Offers, S as Status } from './marketplacev3-offers-f77b79bc.esm.js';
export { C as ContractInterceptor } from './contract-interceptor-7ff72d34.esm.js';
export { C as ContractPlatformFee } from './contract-platform-fee-988cd0c5.esm.js';
export { A as Account, a as AccountFactory, b as AdminFlag, C as ContractPublishedMetadata, D as DEFAULT_PERMISSIONS, P as PermissionSnapshotSchema, d as SignerPermissionRequest, c as SignerPermissionRequestV1, S as SignerPermissionsSchema, e as extractEventsFromAbi } from './account-factory-2bbbbf66.esm.js';
export { D as DeployTransaction, T as Transaction, b as biconomySendFunction, d as defaultGaslessSendFunction, a as defenderSendFunction, e as engineSendFunction, p as prepareGaslessRequest } from './transactions-91192e01.esm.js';
export { e as extractConstructorParams, a as extractFunctions } from './contract-publisher-9e5b13c0.esm.js';
export { E as EndDateSchema, R as RawDateSchema, S as StartDateSchema, a as assertEnabled } from './assertEnabled-3d1729e3.esm.js';
export { c as createTransactionBatches, d as deployContractDeterministic, a as deployWithThrowawayDeployer, e as estimateGasForDeploy, g as getDeploymentInfo } from './deployWithThrowawayDeployer-548e4eff.esm.js';
export { a as InterfaceId_IERC1155, I as InterfaceId_IERC721 } from './QueryParams-b85f1037.esm.js';
export { V as VoteType } from './Vote-f939a040.esm.js';
export { b as ERC1155WrappableSchema, E as ERC20WrappableSchema, a as ERC721WrappableSchema, d as PackMetadataInputSchema, c as PackRewardsOutputSchema, P as PackRewardsSchema } from './pack-535d001a.esm.js';
import '@thirdweb-dev/storage';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';
import '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';
import 'ethers';
import 'eventemitter3';
import 'tiny-invariant';
import '@thirdweb-dev/chains';
import '@thirdweb-dev/generated-abis';
import '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';
import 'zod';
import '@thirdweb-dev/crypto';
import 'bn.js';
import 'bs58';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';
import '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';
import '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';
import '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';
import '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';
import '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';
import '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';
import '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';
import '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';
import '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';
import 'ethers/lib/utils';
import '@thirdweb-dev/merkletree';
import 'uuid';
import 'fast-deep-equal';
import './marketplace-55a15fec.esm.js';
import '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';

function getRpcUrl(network, clientId) {
  return `https://${network}.rpc.thirdweb.com/${clientId || ""}`;
}

// handle browser vs node global

// eslint-disable-next-line better-tree-shaking/no-top-level-side-effects
globalThis.global = globalThis;

export { getRpcUrl };
