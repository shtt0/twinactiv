'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var connector = require('../../../../dist/connector-1b2fa06d.cjs.prod.js');
var sdk = require('@account-abstraction/sdk');
var ethers = require('ethers');
var url = require('../../../../dist/url-f55506f3.cjs.prod.js');
var contracts = require('@account-abstraction/contracts');
var defineProperty = require('../../../../dist/defineProperty-6ca2d9a5.cjs.prod.js');
var utils = require('@account-abstraction/utils');
var constants = require('../../../../dist/constants-b1bc6343.cjs.prod.js');
var sdk$1 = require('@thirdweb-dev/sdk');
var chains = require('@thirdweb-dev/chains');
require('eventemitter3');

function toJSON(op) {
  return ethers.ethers.utils.resolveProperties(op).then(userOp => Object.keys(userOp).map(key => {
    let val = userOp[key];
    if (typeof val !== "string" || !val.startsWith("0x")) {
      val = ethers.ethers.utils.hexValue(val);
    }
    return [key, val];
  }).reduce((set, _ref) => {
    let [k, v] = _ref;
    return {
      ...set,
      [k]: v
    };
  }, {}));
}

// v0.6 userOpHash calculation
async function getUserOpHashV06(userOp, entryPoint, chainId) {
  const op = await ethers.utils.resolveProperties(userOp);
  const hashedUserOp = {
    sender: op.sender,
    nonce: op.nonce,
    initCodeHash: ethers.utils.keccak256(op.initCode),
    callDataHash: ethers.utils.keccak256(op.callData),
    callGasLimit: op.callGasLimit,
    verificationGasLimit: op.verificationGasLimit,
    preVerificationGas: op.preVerificationGas,
    maxFeePerGas: op.maxFeePerGas,
    maxPriorityFeePerGas: op.maxPriorityFeePerGas,
    paymasterAndDataHash: ethers.utils.keccak256(op.paymasterAndData)
  };
  const userOpType = {
    components: [{
      type: "address",
      name: "sender"
    }, {
      type: "uint256",
      name: "nonce"
    }, {
      type: "bytes32",
      name: "initCodeHash"
    }, {
      type: "bytes32",
      name: "callDataHash"
    }, {
      type: "uint256",
      name: "callGasLimit"
    }, {
      type: "uint256",
      name: "verificationGasLimit"
    }, {
      type: "uint256",
      name: "preVerificationGas"
    }, {
      type: "uint256",
      name: "maxFeePerGas"
    }, {
      type: "uint256",
      name: "maxPriorityFeePerGas"
    }, {
      type: "bytes32",
      name: "paymasterAndDataHash"
    }],
    name: "hashedUserOp",
    type: "tuple"
  };
  const encoded = ethers.utils.defaultAbiCoder.encode([userOpType], [{
    ...hashedUserOp
  }]);
  // remove leading word (total length) and trailing word (zero-length signature)

  const userOpHash = ethers.utils.keccak256(encoded);
  const enc = ethers.utils.defaultAbiCoder.encode(["bytes32", "address", "uint256"], [userOpHash, entryPoint, chainId]);
  return ethers.utils.keccak256(enc);
}
const generateRandomUint192 = () => {
  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));
  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));
  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));
  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));
  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));
  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));
  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;
};
const randomNonce = () => {
  let hexString = generateRandomUint192().toString(16);
  if (hexString.length % 2 !== 0) {
    hexString = "0" + hexString;
  }
  hexString = "0x" + hexString;
  return ethers.ethers.BigNumber.from(ethers.ethers.utils.concat([hexString, "0x0000000000000000"]));
};

const SIG_SIZE = 65;
const DUMMY_PAYMASTER_AND_DATA = "0x0101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000001010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101";
class VerifyingPaymasterAPI extends sdk.PaymasterAPI {
  constructor(paymasterUrl, entryPoint, clientId, secretKey) {
    super();
    this.paymasterUrl = paymasterUrl;
    this.entryPoint = entryPoint;
    this.clientId = clientId;
    this.secretKey = secretKey;
  }
  async getPaymasterAndData(userOp) {
    const headers = {
      "Content-Type": "application/json"
    };
    if (url.isTwUrl(this.paymasterUrl)) {
      if (this.secretKey && this.clientId) {
        throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");
      }
      if (this.secretKey) {
        headers["x-secret-key"] = this.secretKey;
      } else if (this.clientId) {
        headers["x-client-id"] = this.clientId;
        if (typeof globalThis !== "undefined" && "APP_BUNDLE_ID" in globalThis) {
          headers["x-bundle-id"] = globalThis.APP_BUNDLE_ID;
        }
      }

      // Dashboard token.
      if (typeof globalThis !== "undefined" && "TW_AUTH_TOKEN" in globalThis && typeof globalThis.TW_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;
      }

      // CLI token.
      if (typeof globalThis !== "undefined" && "TW_CLI_AUTH_TOKEN" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;
        headers["x-authorize-wallet"] = "true";
      }
    }

    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.
    const response = await fetch(this.paymasterUrl, {
      method: "POST",
      headers,
      body: JSON.stringify({
        jsonrpc: "2.0",
        id: 1,
        method: "pm_sponsorUserOperation",
        params: [await toJSON(userOp), {
          entryPoint: this.entryPoint
        }]
      })
    });
    const res = await response.json();
    if (!response.ok) {
      const error = res.error || response.statusText;
      const code = res.code || "UNKNOWN";
      throw new Error(`Paymaster error: ${error}
Status: ${response.status}
Code: ${code}`);
    }
    if (res.result) {
      const result = res.result.paymasterAndData || res.result;
      return result.toString();
    } else {
      throw new Error(`Paymaster returned no result from ${this.paymasterUrl}`);
    }
  }
}
const getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);

/**
 * This class encapsulates Ethers.js listener function and necessary UserOperation details to
 * discover a TransactionReceipt for the operation.
 *
 * TODO refactor this to a simple event listener on the entry point
 */
class UserOperationEventListener {
  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {
    this.resolve = resolve;
    this.reject = reject;
    this.entryPoint = entryPoint;
    this.sender = sender;
    this.userOpHash = userOpHash;
    this.nonce = nonce;
    this.timeout = timeout;
    defineProperty._defineProperty(this, "resolved", false);
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    this.boundLisener = this.listenerCallback.bind(this);
  }
  start() {
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);
    // listener takes time... first query directly:
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    setTimeout(async () => {
      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks
      if (res.length > 0) {
        void this.listenerCallback(res[0]);
      } else {
        this.entryPoint.once(filter, this.boundLisener);
      }
    }, 100);
  }
  stop() {
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    this.entryPoint.off("UserOperationEvent", this.boundLisener);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async listenerCallback() {
    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {
      param[_key] = arguments[_key];
    }
    // TODO clean this up..
    // eslint-disable-next-line prefer-rest-params
    const event = arguments[arguments.length - 1];
    if (!event.args) {
      console.error("got event without args", event);
      return;
    }
    // TODO: can this happen? we register to event by userOpHash..
    if (event.args.userOpHash !== this.userOpHash) {
      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);
      return;
    }
    const transactionReceipt = await event.getTransactionReceipt();

    // before returning the receipt, update the status from the event.
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    if (!event.args.success) {
      await this.extractFailureReason(transactionReceipt);
    }
    this.stop();
    this.resolve(transactionReceipt);
    this.resolved = true;
  }
  async extractFailureReason(receipt) {
    receipt.status = 0;
    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);
    if (revertReasonEvents[0]) {
      let message = revertReasonEvents[0].args.revertReason;
      if (message.startsWith("0x08c379a0")) {
        // Error(string)
        message = ethers.utils.defaultAbiCoder.decode(["string"], "0x" + message.substring(10)).toString();
      }
      this.reject(new Error(`UserOp failed with reason: ${message}`));
    }
  }
}

class ERC4337EthersSigner extends ethers.Signer {
  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference
  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {
    super();
    ethers.utils.defineReadOnly(this, "provider", erc4337provider);
    this.config = config;
    this.originalSigner = originalSigner;
    this.erc4337provider = erc4337provider;
    this.httpRpcClient = httpRpcClient;
    this.smartAccountAPI = smartAccountAPI;
  }
  // This one is called by Contract. It signs the request and passes in to Provider to be sent.
  async sendTransaction(transaction, batchData) {
    const tx = await ethers.ethers.utils.resolveProperties(transaction);
    await this.verifyAllNecessaryFields(tx);
    const multidimensionalNonce = randomNonce();
    const userOperation = await this.smartAccountAPI.createSignedUserOp({
      target: tx.to || "",
      data: tx.data?.toString() || "0x",
      value: tx.value,
      gasLimit: tx.gasLimit,
      nonce: multidimensionalNonce
    }, batchData);
    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);
    try {
      await this.httpRpcClient.sendUserOpToBundler(userOperation);
    } catch (error) {
      throw this.unwrapError(error);
    }
    // TODO: handle errors - transaction that is "rejected" by bundler is _not likely_ to ever resolve its "wait()"
    return transactionResponse;
  }
  unwrapError(errorIn) {
    try {
      let errorMsg = "Unknown Error";
      if (errorIn.error) {
        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;
      } else if (errorIn.body && typeof errorIn.body === "string") {
        const errorBody = JSON.parse(errorIn.body);
        const errorStatus = errorIn.status || "UNKNOWN";
        const errorCode = errorBody?.code || "UNKNOWN";
        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;
        if (failedOpMessage?.includes("FailedOp")) {
          let paymasterInfo = "";
          // TODO: better error extraction methods will be needed
          const matched = failedOpMessage.match(/FailedOp\((.*)\)/);
          if (matched) {
            const split = matched[1].split(",");
            paymasterInfo = `(paymaster address: ${split[1]})`;
            failedOpMessage = split[2];
          }
          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;
        } else {
          errorMsg = `RPC error: ${failedOpMessage}
Status: ${errorStatus}
Code: ${errorCode}`;
        }
      }
      const error = new Error(errorMsg);
      error.stack = errorIn.stack;
      return error;
    } catch (error) {}
    return errorIn;
  }
  async verifyAllNecessaryFields(transactionRequest) {
    if (!transactionRequest.to) {
      throw new Error("Missing call target");
    }
    if (!transactionRequest.data && !transactionRequest.value) {
      // TBD: banning no-op UserOps seems to make sense on provider level
      throw new Error("Missing call data or value");
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  connect(provider) {
    throw new Error("changing providers is not supported");
  }
  async getAddress() {
    if (!this.address) {
      this.address = await this.erc4337provider.getSenderAccountAddress();
    }
    return this.address;
  }
  async signMessage(message) {
    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();
    if (isNotDeployed) {
      console.log("Account contract not deployed yet. Deploying account before signing message");
      const tx = await this.sendTransaction({
        to: await this.getAddress(),
        data: "0x"
      });
      await tx.wait();
    }
    return await this.originalSigner.signMessage(message);
  }
  async signTransaction(
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  transaction) {
    throw new Error("not implemented");
  }
}

class ERC4337EthersProvider extends ethers.providers.BaseProvider {
  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {
    super({
      name: "ERC-4337 Custom Network",
      chainId
    });
    this.chainId = chainId;
    this.config = config;
    this.originalSigner = originalSigner;
    this.originalProvider = originalProvider;
    this.httpRpcClient = httpRpcClient;
    this.entryPoint = entryPoint;
    this.smartAccountAPI = smartAccountAPI;
    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);
  }
  getSigner() {
    return this.signer;
  }
  async perform(method, params) {
    if (method === "sendTransaction" || method === "getTransactionReceipt") {
      // TODO: do we need 'perform' method to be available at all?
      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.
      throw new Error("Should not get here. Investigate.");
    }
    if (method === "estimateGas") {
      // hijack this to estimate gas from the entrypoint instead
      const {
        callGasLimit
      } = await this.smartAccountAPI.encodeUserOpCallDataAndGasLimit({
        target: params.transaction.to,
        data: params.transaction.data,
        value: params.transaction.value,
        gasLimit: params.transaction.gasLimit
      });
      return callGasLimit;
    }
    return await this.originalProvider.perform(method, params);
  }
  async getTransaction(transactionHash) {
    // TODO
    return await super.getTransaction(transactionHash);
  }
  async getTransactionReceipt(transactionHash) {
    const userOpHash = await transactionHash;
    const sender = await this.getSenderAccountAddress();
    return await new Promise((resolve, reject) => {
      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();
    });
  }
  async getSenderAccountAddress() {
    return await this.smartAccountAPI.getAccountAddress();
  }
  async waitForTransaction(transactionHash, confirmations, timeout) {
    const sender = await this.getSenderAccountAddress();
    return await new Promise((resolve, reject) => {
      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);
      listener.start();
    });
  }

  // fabricate a response in a format usable by ethers users...
  async constructUserOpTransactionResponse(userOp1) {
    const userOp = await ethers.utils.resolveProperties(userOp1);
    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);
    const waitForUserOp = async () => await new Promise((resolve, reject) => {
      new UserOperationEventListener(resolve, reject, this.entryPoint, userOp.sender, userOpHash, userOp.nonce).start();
    });
    return {
      hash: userOpHash,
      confirmations: 0,
      from: userOp.sender,
      nonce: 0,
      // not the real nonce, but good enough for this purpose
      gasLimit: ethers.BigNumber.from(userOp.callGasLimit),
      // ??
      value: ethers.BigNumber.from(0),
      data: ethers.utils.hexValue(userOp.callData),
      // should extract the actual called method from this "execFromEntryPoint()" call
      chainId: this.chainId,
      wait: async confirmations => {
        const transactionReceipt = await waitForUserOp();
        if (userOp.initCode.length !== 0) {
          // checking if the wallet has been deployed by the transaction; it must be if we are here
          await this.smartAccountAPI.checkAccountPhantom();
        }
        return transactionReceipt;
      }
    };
  }
  async detectNetwork() {
    return this.originalProvider.detectNetwork();
  }
}

var pkg = {
	name: "@thirdweb-dev/wallets",
	version: "2.1.10",
	main: "dist/thirdweb-dev-wallets.cjs.js",
	module: "dist/thirdweb-dev-wallets.esm.js",
	browser: {
		"./dist/thirdweb-dev-wallets.esm.js": "./dist/thirdweb-dev-wallets.browser.esm.js"
	},
	exports: {
		".": {
			module: {
				browser: "./dist/thirdweb-dev-wallets.browser.esm.js",
				"default": "./dist/thirdweb-dev-wallets.esm.js"
			},
			"default": "./dist/thirdweb-dev-wallets.cjs.js"
		},
		"./evm": {
			module: {
				browser: "./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js",
				"default": "./evm/dist/thirdweb-dev-wallets-evm.esm.js"
			},
			"default": "./evm/dist/thirdweb-dev-wallets-evm.cjs.js"
		},
		"./evm/wallets/okx": {
			module: {
				browser: "./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js",
				"default": "./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js"
			},
			"default": "./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js"
		},
		"./evm/wallets/base": {
			module: {
				browser: "./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js",
				"default": "./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js"
			},
			"default": "./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js"
		},
		"./evm/wallets/safe": {
			module: {
				browser: "./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js",
				"default": "./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js"
			},
			"default": "./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js"
		},
		"./evm/wallets/async": {
			module: {
				browser: "./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js",
				"default": "./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js"
			},
			"default": "./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js"
		},
		"./evm/wallets/frame": {
			module: {
				browser: "./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js",
				"default": "./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js"
			},
			"default": "./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js"
		},
		"./evm/wallets/magic": {
			module: {
				browser: "./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js",
				"default": "./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js"
			},
			"default": "./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js"
		},
		"./evm/wallets/rabby": {
			module: {
				browser: "./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js",
				"default": "./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js"
			},
			"default": "./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js"
		},
		"./evm/wallets/trust": {
			module: {
				browser: "./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js",
				"default": "./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js"
			},
			"default": "./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js"
		},
		"./evm/wallets/blocto": {
			module: {
				browser: "./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js",
				"default": "./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js"
			},
			"default": "./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js"
		},
		"./evm/wallets/coin98": {
			module: {
				browser: "./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js",
				"default": "./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js"
			},
			"default": "./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js"
		},
		"./evm/wallets/engine": {
			module: {
				browser: "./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js",
				"default": "./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js"
			},
			"default": "./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js"
		},
		"./evm/wallets/ethers": {
			module: {
				browser: "./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js",
				"default": "./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js"
			},
			"default": "./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js"
		},
		"./evm/wallets/signer": {
			module: {
				browser: "./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js",
				"default": "./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js"
			},
			"default": "./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js"
		},
		"./evm/wallets/zerion": {
			module: {
				browser: "./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js",
				"default": "./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js"
			},
			"default": "./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js"
		},
		"./evm/wallets/aws-kms": {
			module: {
				browser: "./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js",
				"default": "./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js"
			},
			"default": "./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js"
		},
		"./evm/wallets/gcp-kms": {
			module: {
				browser: "./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js",
				"default": "./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js"
			},
			"default": "./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js"
		},
		"./evm/wallets/phantom": {
			module: {
				browser: "./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js",
				"default": "./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js"
			},
			"default": "./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js"
		},
		"./evm/wallets/abstract": {
			module: {
				browser: "./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js",
				"default": "./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js"
			},
			"default": "./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js"
		},
		"./evm/wallets/injected": {
			module: {
				browser: "./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js",
				"default": "./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js"
			},
			"default": "./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js"
		},
		"./evm/wallets/metamask": {
			module: {
				browser: "./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js",
				"default": "./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js"
			},
			"default": "./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js"
		},
		"./evm/wallets/core-wallet": {
			module: {
				browser: "./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js",
				"default": "./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js"
			},
			"default": "./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js"
		},
		"./evm/wallets/private-key": {
			module: {
				browser: "./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js",
				"default": "./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js"
			},
			"default": "./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js"
		},
		"./evm/connectors/okx": {
			module: {
				browser: "./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js",
				"default": "./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js"
			},
			"default": "./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js"
		},
		"./evm/wallets/local-wallet": {
			module: {
				browser: "./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js",
				"default": "./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js"
			},
			"default": "./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js"
		},
		"./evm/wallets/paper-wallet": {
			module: {
				browser: "./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js",
				"default": "./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js"
			},
			"default": "./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js"
		},
		"./evm/wallets/smart-wallet": {
			module: {
				browser: "./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js",
				"default": "./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js"
			},
			"default": "./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js"
		},
		"./evm/connectors/safe": {
			module: {
				browser: "./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js",
				"default": "./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js"
			},
			"default": "./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js"
		},
		"./evm/connectors/frame": {
			module: {
				browser: "./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js",
				"default": "./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js"
			},
			"default": "./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js"
		},
		"./evm/connectors/magic": {
			module: {
				browser: "./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js",
				"default": "./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js"
			},
			"default": "./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js"
		},
		"./evm/connectors/paper": {
			module: {
				browser: "./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js",
				"default": "./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js"
			},
			"default": "./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js"
		},
		"./evm/connectors/rabby": {
			module: {
				browser: "./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js",
				"default": "./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js"
			},
			"default": "./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js"
		},
		"./evm/connectors/trust": {
			module: {
				browser: "./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js",
				"default": "./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js"
			},
			"default": "./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js"
		},
		"./evm/wallets/rainbow-wallet": {
			module: {
				browser: "./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js",
				"default": "./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js"
			},
			"default": "./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js"
		},
		"./evm/wallets/wallet-connect": {
			module: {
				browser: "./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js",
				"default": "./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js"
			},
			"default": "./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js"
		},
		"./evm/connectors/blocto": {
			module: {
				browser: "./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js",
				"default": "./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js"
			},
			"default": "./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js"
		},
		"./evm/connectors/coin98": {
			module: {
				browser: "./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js",
				"default": "./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js"
			},
			"default": "./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js"
		},
		"./evm/connectors/signer": {
			module: {
				browser: "./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js",
				"default": "./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js"
			},
			"default": "./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js"
		},
		"./evm/connectors/zerion": {
			module: {
				browser: "./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js",
				"default": "./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js"
			},
			"default": "./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js"
		},
		"./evm/wallets/coinbase-wallet": {
			module: {
				browser: "./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js",
				"default": "./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js"
			},
			"default": "./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js"
		},
		"./evm/wallets/embedded-wallet": {
			module: {
				browser: "./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js",
				"default": "./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js"
			},
			"default": "./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js"
		},
		"./evm/connectors/phantom": {
			module: {
				browser: "./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js",
				"default": "./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js"
			},
			"default": "./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js"
		},
		"./evm/connectors/rainbow": {
			module: {
				browser: "./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js",
				"default": "./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js"
			},
			"default": "./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js"
		},
		"./evm/connectors/injected": {
			module: {
				browser: "./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js",
				"default": "./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js"
			},
			"default": "./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js"
		},
		"./evm/connectors/metamask": {
			module: {
				browser: "./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js",
				"default": "./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js"
			},
			"default": "./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js"
		},
		"./evm/wallets/local-wallet-node": {
			module: {
				browser: "./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js",
				"default": "./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js"
			},
			"default": "./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js"
		},
		"./evm/wallets/wallet-connect-v1": {
			module: {
				browser: "./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js",
				"default": "./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js"
			},
			"default": "./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js"
		},
		"./evm/wallets/crypto-defi-wallet": {
			module: {
				browser: "./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js",
				"default": "./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js"
			},
			"default": "./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js"
		},
		"./evm/wallets/aws-secrets-manager": {
			module: {
				browser: "./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js",
				"default": "./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js"
			},
			"default": "./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js"
		},
		"./evm/connectors/core-wallet": {
			module: {
				browser: "./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js",
				"default": "./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js"
			},
			"default": "./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js"
		},
		"./evm/connectors/local-wallet": {
			module: {
				browser: "./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js",
				"default": "./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js"
			},
			"default": "./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js"
		},
		"./evm/connectors/smart-wallet": {
			module: {
				browser: "./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js",
				"default": "./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js"
			},
			"default": "./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js"
		},
		"./evm/connectors/wallet-connect": {
			module: {
				browser: "./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js",
				"default": "./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js"
			},
			"default": "./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js"
		},
		"./evm/connectors/coinbase-wallet": {
			module: {
				browser: "./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js",
				"default": "./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js"
			},
			"default": "./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js"
		},
		"./evm/connectors/embedded-wallet": {
			module: {
				browser: "./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js",
				"default": "./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js"
			},
			"default": "./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js"
		},
		"./evm/wallets/token-bound-smart-wallet": {
			module: {
				browser: "./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js",
				"default": "./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js"
			},
			"default": "./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js"
		},
		"./evm/connectors/wallet-connect-v1": {
			module: {
				browser: "./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js",
				"default": "./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js"
			},
			"default": "./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js"
		},
		"./evm/connectors/crypto-defi-wallet": {
			module: {
				browser: "./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js",
				"default": "./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js"
			},
			"default": "./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js"
		},
		"./evm/connectors/token-bound-smart-wallet": {
			module: {
				browser: "./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js",
				"default": "./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js"
			},
			"default": "./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js"
		},
		"./evm/connectors/embedded-wallet/implementations": {
			module: {
				browser: "./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js",
				"default": "./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js"
			},
			"default": "./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js"
		},
		"./package.json": "./package.json"
	},
	types: "dist/thirdweb-dev-wallets.cjs.d.ts",
	repository: "https://github.com/thirdweb-dev/js/tree/main/packages/wallets",
	license: "Apache-2.0",
	bugs: {
		url: "https://github.com/thirdweb-dev/js/issues"
	},
	author: "thirdweb eng <eng@thirdweb.com>",
	files: [
		"dist/",
		"evm/"
	],
	preconstruct: {
		entrypoints: [
			"index.ts",
			"evm/index.ts",
			"evm/connectors/*/index.ts",
			"evm/connectors/embedded-wallet/implementations/index.ts",
			"evm/wallets/**"
		],
		exports: {
			envConditions: [
				"browser"
			]
		}
	},
	sideEffects: false,
	dependencies: {
		"@account-abstraction/contracts": "^0.5.0",
		"@account-abstraction/sdk": "^0.5.0",
		"@account-abstraction/utils": "^0.5.0",
		"@blocto/sdk": "^0.5.4",
		"@coinbase/wallet-sdk": "^3.7.1",
		"@google-cloud/kms": "3.0.1",
		"@magic-ext/connect": "^6.7.2",
		"@magic-ext/oauth": "^7.6.2",
		"@magic-sdk/provider": "^13.6.2",
		"@metamask/eth-sig-util": "^4.0.0",
		"@paperxyz/embedded-wallet-service-sdk": "^1.2.5",
		"@paperxyz/sdk-common-utilities": "^0.1.0",
		"@safe-global/safe-core-sdk": "^3.3.4",
		"@safe-global/safe-ethers-adapters": "0.1.0-alpha.17",
		"@safe-global/safe-ethers-lib": "^1.9.4",
		"@thirdweb-dev/chains": "workspace:*",
		"@thirdweb-dev/crypto": "workspace:*",
		"@thirdweb-dev/contracts-js": "workspace:*",
		"@thirdweb-dev/sdk": "workspace:*",
		"@walletconnect/core": "^2.9.1",
		"@walletconnect/ethereum-provider": "^2.9.1",
		"@walletconnect/jsonrpc-utils": "^1.0.8",
		"@walletconnect/modal": "^2.6.1",
		"@walletconnect/types": "^2.9.1",
		"@walletconnect/utils": "^2.10.2",
		"@walletconnect/web3wallet": "^1.8.7",
		"asn1.js": "5.4.1",
		"bn.js": "5.2.0",
		buffer: "^6.0.3",
		"eth-provider": "^0.13.6",
		"ethereumjs-util": "^7.1.3",
		eventemitter3: "^5.0.1",
		"key-encoder": "2.0.3",
		"magic-sdk": "^13.6.2",
		"web3-core": "1.5.2"
	},
	peerDependencies: {
		"@aws-sdk/client-secrets-manager": "^3.256.0",
		"@noble/ed25519": "^1.7.1",
		bs58: "^5.0.0",
		ethers: "^5.7.2",
		"ethers-aws-kms-signer": "^1.3.2",
		tweetnacl: "^1.0.3"
	},
	peerDependenciesMeta: {
		tweetnacl: {
			optional: true
		},
		"@aws-sdk/client-secrets-manager": {
			optional: true
		},
		"ethers-aws-kms-signer": {
			optional: true
		},
		"@noble/ed25519": {
			optional: true
		},
		bs58: {
			optional: true
		},
		ethers: {
			optional: true
		}
	},
	devDependencies: {
		"@aws-sdk/client-secrets-manager": "^3.378.0",
		"@babel/plugin-proposal-class-properties": "7.18.6",
		"@babel/plugin-transform-flow-strip-types": "^7.22.5",
		"@babel/plugin-transform-private-methods": "7.22.5",
		"@noble/ed25519": "^1.7.1",
		"@preconstruct/cli": "2.7.0",
		"@thirdweb-dev/tsconfig": "workspace:*",
		"@types/bn.js": "^5.1.1",
		abitype: "^0.2.5",
		"babel-plugin-transform-inline-environment-variables": "^0.4.4",
		bs58: "^5.0.0",
		"cross-env": "^7.0.3",
		"eslint-config-thirdweb": "workspace:*",
		"eslint-plugin-better-tree-shaking": "0.0.4",
		"eslint-plugin-tsdoc": "^0.2.16",
		"ethereum-provider": "^0.7.7",
		ethers: "^5.7.2",
		"ethers-aws-kms-signer": "^1.3.2",
		rimraf: "^3.0.2",
		tweetnacl: "^1.0.3",
		typedoc: "^0.25.2",
		typescript: "^5.1.6"
	},
	scripts: {
		format: "prettier --write 'src/**/*'",
		lint: "eslint src/ && bunx publint --strict --level warning",
		fix: "eslint src/ --fix",
		clean: "rm -rf dist/",
		build: "tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build",
		"preconstruct:fix": "preconstruct fix",
		push: "yalc push",
		typedoc: "rimraf typedoc && node typedoc.js"
	},
	engines: {
		node: ">=18"
	}
};

function isBrowser() {
  return typeof window !== "undefined";
}
class HttpRpcClient {
  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {
    this.bundlerUrl = bundlerUrl;
    this.entryPointAddress = entryPointAddress;
    this.chainId = chainId;
    const headers = {};
    if (url.isTwUrl(this.bundlerUrl)) {
      const bundleId = typeof globalThis !== "undefined" && "APP_BUNDLE_ID" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;
      if (secretKey) {
        headers["x-secret-key"] = secretKey;
      } else if (clientId) {
        headers["x-client-id"] = clientId;
        if (bundleId) {
          headers["x-bundle-id"] = bundleId;
        }
      }

      // Dashboard token
      if (typeof globalThis !== "undefined" && "TW_AUTH_TOKEN" in globalThis && typeof globalThis.TW_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;
      }

      // CLI token
      if (typeof globalThis !== "undefined" && "TW_CLI_AUTH_TOKEN" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === "string") {
        headers["authorization"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;
        headers["x-authorize-wallet"] = "true";
      }
      headers["x-sdk-version"] = pkg.version;
      headers["x-sdk-name"] = pkg.name;
      headers["x-sdk-platform"] = bundleId ? "react-native" : isBrowser() ? window.bridge !== undefined ? "webGL" : "browser" : "node";
    }
    this.userOpJsonRpcProvider = new ethers.providers.JsonRpcProvider({
      url: this.bundlerUrl,
      headers
    }, {
      name: "Connected bundler network",
      chainId
    });
    this.initializing = this.validateChainId();
  }
  async validateChainId() {
    // validate chainId is in sync with expected chainid
    const chain = await this.userOpJsonRpcProvider.send("eth_chainId", []);
    const bundlerChain = parseInt(chain);
    if (bundlerChain !== this.chainId) {
      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);
    }
  }

  /**
   * send a UserOperation to the bundler
   * @param userOp1 - the UserOperation to send
   * @returns userOpHash the id of this operation, for getUserOperationTransaction
   */
  async sendUserOpToBundler(userOp1) {
    await this.initializing;
    const hexifiedUserOp = utils.deepHexlify(await ethers.utils.resolveProperties(userOp1));
    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];
    await this.printUserOperation("eth_sendUserOperation", jsonRequestData);
    return await this.userOpJsonRpcProvider.send("eth_sendUserOperation", [hexifiedUserOp, this.entryPointAddress]);
  }
  async estimateUserOpGas(userOp1) {
    await this.initializing;
    const hexifiedUserOp = utils.deepHexlify(await ethers.utils.resolveProperties(userOp1));
    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];
    await this.printUserOperation("eth_estimateUserOperationGas", jsonRequestData);
    return await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas", [hexifiedUserOp, this.entryPointAddress]);
  }
  async printUserOperation(method, _ref) {
    {
      return;
    }
  }
}

/**
 * wrap an existing provider to tunnel requests through Account Abstraction.
 * @param originalProvider - the normal provider
 * @param config - see {@link ClientConfig} for more info
 * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer
 */
function create4337Provider(config, accountApi, originalProvider, chainId) {
  const entryPoint = contracts.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);
  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);
  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);
}

/**
 * Base class for all Smart Wallet ERC-4337 Clients to implement.
 * Subclass should inherit 5 methods to support a specific wallet contract:
 *
 * - getAccountInitCode - return the value to put into the "initCode" field, if the account is not yet deployed. should create the account instance using a factory contract.
 * - getNonce - return current account's nonce value
 * - encodeExecute - encode the call from entryPoint through our account to the target contract.
 * - signUserOpHash - sign the hash of a UserOp.
 *
 * The user can use the following APIs:
 * - createUnsignedUserOp - given "target" and "calldata", fill userOp to perform that operation from the account.
 * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it
 */
class BaseAccountAPI {
  // entryPoint connected to "zero" address. allowed to make static calls (e.g. to getSenderAddress)

  /**
   * base constructor.
   * subclass SHOULD add parameters that define the owner (signer) of this wallet
   */
  constructor(params) {
    defineProperty._defineProperty(this, "isPhantom", true);
    this.provider = params.provider;
    this.overheads = params.overheads;
    this.entryPointAddress = params.entryPointAddress;
    this.accountAddress = params.accountAddress;
    this.paymasterAPI = params.paymasterAPI;

    // factory "connect" define the contract address. the contract "connect" defines the "from" address.
    this.entryPointView = contracts.EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.ethers.constants.AddressZero);
  }

  /**
   * return the value to put into the "initCode" field, if the contract is not yet deployed.
   * this value holds the "factory" address, followed by this account's information
   */

  /**
   * return current account's nonce.
   */

  /**
   * encode the call from entryPoint through our account to the target contract.
   * @param target - the target contract address
   * @param value - the value to send to the target contract
   * @param data - the calldata to send to the target contract
   */

  /**
   * sign a userOp's hash (userOpHash).
   * @param userOpHash - the hash to sign
   */

  /**
   * calculate the account address even before it is deployed
   */

  /**
   * check if the contract is already deployed.
   */
  async checkAccountPhantom() {
    if (!this.isPhantom) {
      // already deployed. no need to check anymore.
      return this.isPhantom;
    }
    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());
    if (senderAddressCode.length > 2) {
      this.isPhantom = false;
    }
    return this.isPhantom;
  }

  /**
   * return initCode value to into the UserOp.
   * (either deployment code, or empty hex if contract already deployed)
   */
  async getInitCode() {
    if (await this.checkAccountPhantom()) {
      return await this.getAccountInitCode();
    }
    return "0x";
  }

  /**
   * return maximum gas used for verification.
   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.
   */
  async getVerificationGasLimit() {
    return 100000;
  }

  /**
   * should cover cost of putting calldata on-chain, and some overhead.
   * actual overhead depends on the expected bundle size
   */
  async getPreVerificationGas(userOp) {
    const p = await ethers.utils.resolveProperties(userOp);
    return sdk.calcPreVerificationGas(p, this.overheads);
  }

  /**
   * ABI-encode a user operation. used for calldata cost estimation
   */
  packUserOp(userOp) {
    return utils.packUserOp(userOp, false);
  }
  async encodeUserOpCallDataAndGasLimit(detailsForUserOp, batchData) {
    const value = parseNumber(detailsForUserOp.value) ?? ethers.BigNumber.from(0);
    const callData = batchData ? detailsForUserOp.data : await this.prepareExecute(detailsForUserOp.target, value, detailsForUserOp.data).then(tx => tx.encode());
    let callGasLimit;
    const isPhantom = await this.checkAccountPhantom();
    if (isPhantom) {
      // when the account is not deployed yet, we simulate the call to the target contract directly
      if (batchData) {
        const limits = await Promise.all(batchData.targets.map((_, i) => this.provider.estimateGas({
          from: this.getAccountAddress(),
          to: batchData.targets[i],
          data: batchData.data[i]
        })));
        callGasLimit = limits.reduce((a, b) => a.add(b), ethers.BigNumber.from(0));
      } else {
        callGasLimit = await this.provider.estimateGas({
          from: this.getAccountAddress(),
          to: detailsForUserOp.target,
          data: detailsForUserOp.data
        });
      }

      // add 20% overhead for entrypoint checks
      callGasLimit = callGasLimit.mul(120).div(100);
      // if the estimation is too low, we use a fixed value of 500k
      if (callGasLimit.lt(30000)) {
        callGasLimit = ethers.BigNumber.from(500000);
      }
    } else {
      callGasLimit = parseNumber(detailsForUserOp.gasLimit) ?? (await this.provider.estimateGas({
        from: this.entryPointAddress,
        to: this.getAccountAddress(),
        data: callData
      }));
    }
    return {
      callData,
      callGasLimit
    };
  }

  /**
   * return userOpHash for signing.
   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)
   * @param userOp - userOperation, (signature field ignored)
   */
  async getUserOpHash(userOp) {
    const chainId = await this.provider.getNetwork().then(net => net.chainId);
    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);
  }

  /**
   * return the account's address.
   * this value is valid even before deploying the contract.
   */
  async getAccountAddress() {
    if (!this.senderAddress) {
      if (this.accountAddress) {
        this.senderAddress = this.accountAddress;
      } else {
        this.senderAddress = await this.getCounterFactualAddress();
      }
    }
    return this.senderAddress;
  }
  async estimateCreationGas(initCode) {
    if (!initCode || initCode === "0x") {
      return 0;
    }
    const deployerAddress = initCode.substring(0, 42);
    const deployerCallData = "0x" + initCode.substring(42);
    return await this.provider.estimateGas({
      to: deployerAddress,
      data: deployerCallData
    });
  }

  /**
   * create a UserOperation, filling all details (except signature)
   * - if account is not yet created, add initCode to deploy it.
   * - if gas or nonce are missing, read them from the chain (note that we can't fill gaslimit before the account is created)
   * @param info - transaction details for the userOp
   */
  async createUnsignedUserOp(info, batchData) {
    const {
      callData,
      callGasLimit
    } = await this.encodeUserOpCallDataAndGasLimit(info, batchData);
    const initCode = await this.getInitCode();
    const initGas = await this.estimateCreationGas(initCode);
    const verificationGasLimit = ethers.BigNumber.from(await this.getVerificationGasLimit()).add(initGas);
    let {
      maxFeePerGas,
      maxPriorityFeePerGas
    } = info;
    if (!maxFeePerGas || !maxPriorityFeePerGas) {
      const feeData = await sdk$1.getDynamicFeeData(this.provider);
      if (!maxPriorityFeePerGas) {
        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;
      }
      if (!maxFeePerGas) {
        maxFeePerGas = feeData.maxFeePerGas ?? undefined;
        const network = await this.provider.getNetwork();
        const chainId = network.chainId;
        if (chainId === chains.Celo.chainId || chainId === chains.CeloAlfajoresTestnet.chainId || chainId === chains.CeloBaklavaTestnet.chainId) {
          maxPriorityFeePerGas = maxFeePerGas;
        }
      }
    }
    const partialUserOp = {
      sender: this.getAccountAddress(),
      nonce: info.nonce ?? this.getNonce(),
      initCode,
      callData,
      callGasLimit,
      verificationGasLimit,
      maxFeePerGas,
      maxPriorityFeePerGas,
      paymasterAndData: "0x"
    };
    let paymasterAndData;
    let userOp = partialUserOp;
    if (this.paymasterAPI) {
      // fill (partial) preVerificationGas (all except the cost of the generated paymasterAndData)
      try {
        // userOp.preVerificationGas contains a promise that will resolve to an error.
        await ethers.ethers.utils.resolveProperties(userOp);
        // eslint-disable-next-line no-empty
      } catch (_) {}
      const pmOp = {
        sender: userOp.sender,
        nonce: userOp.nonce,
        initCode: userOp.initCode,
        callData: userOp.callData,
        callGasLimit: userOp.callGasLimit,
        verificationGasLimit: userOp.verificationGasLimit,
        maxFeePerGas: userOp.maxFeePerGas,
        maxPriorityFeePerGas: userOp.maxPriorityFeePerGas,
        // A dummy value here is required in order to calculate a correct preVerificationGas value.
        paymasterAndData: DUMMY_PAYMASTER_AND_DATA,
        signature: ethers.ethers.utils.hexlify(Buffer.alloc(SIG_SIZE, 1))
      };
      userOp = await ethers.ethers.utils.resolveProperties(pmOp);
      const preVerificationGas = sdk.calcPreVerificationGas(userOp);
      userOp.preVerificationGas = preVerificationGas;
      paymasterAndData = await this.paymasterAPI.getPaymasterAndData(userOp);
      if (paymasterAndData === "0x") {
        paymasterAndData = undefined;
      }
    }
    if (paymasterAndData) {
      userOp.paymasterAndData = paymasterAndData;
      return {
        ...userOp,
        signature: ""
      };
    } else {
      const modifiedOp = {
        ...userOp,
        paymasterAndData: "0x"
      };
      modifiedOp.preVerificationGas = await this.getPreVerificationGas(modifiedOp);
      return {
        ...modifiedOp,
        signature: ""
      };
    }
  }

  /**
   * Sign the filled userOp.
   * @param userOp - the UserOperation to sign (with signature field ignored)
   */
  async signUserOp(userOp) {
    const userOpHash = await this.getUserOpHash(userOp);
    const signature = this.signUserOpHash(userOpHash);
    return {
      ...userOp,
      signature
    };
  }

  /**
   * helper method: create and sign a user operation.
   * @param info - transaction details for the userOp
   */
  async createSignedUserOp(info, batchData) {
    return await this.signUserOp(await this.createUnsignedUserOp(info, batchData));
  }

  /**
   * get the transaction that has this userOpHash mined, or null if not found
   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)
   * @param timeout - stop waiting after this timeout
   * @param interval - time to wait between polls.
   * @returns the transactionHash this userOp was mined, or null if not found.
   */
  async getUserOpReceipt(userOpHash) {
    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30000;
    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;
    const endtime = Date.now() + timeout;
    while (Date.now() < endtime) {
      const events = await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(userOpHash));
      if (events[0]) {
        return events[0].transactionHash;
      }
      await new Promise(resolve => setTimeout(resolve, interval));
    }
    return null;
  }
}
function parseNumber(a) {
  if (!a || a === "") {
    return null;
  }
  return ethers.BigNumber.from(a.toString());
}

class AccountAPI extends BaseAccountAPI {
  constructor(params, originalProvider) {
    super({
      ...params,
      provider: originalProvider
    });
    this.params = params;
    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required
    // We don't want to use the localSigner directly since it might be connected to another chain
    // so we just use the public hardhat pkey instead
    this.sdk = sdk$1.ThirdwebSDK.fromPrivateKey(sdk$1.LOCAL_NODE_PKEY, params.chain, {
      clientId: params.clientId,
      secretKey: params.secretKey
    });
  }
  async getChainId() {
    return await this.provider.getNetwork().then(n => n.chainId);
  }
  async getAccountContract() {
    if (!this.accountContract) {
      if (this.params.accountInfo?.abi) {
        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);
      } else {
        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), constants.ACCOUNT_CORE_ABI);
      }
    }
    return this.accountContract;
  }
  async getAccountInitCode() {
    const factory = await this.getFactoryContract();
    console.log("Deploying smart wallet via factory");
    const localSigner = await this.params.localSigner.getAddress();
    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);
    try {
      console.log("Cost to deploy smart wallet: ", (await tx.estimateGasCost()).ether, "ETH");
    } catch (e) {
      console.error("Cost to deploy smart wallet: unknown", e);
    }
    return ethers.utils.hexConcat([factory.getAddress(), tx.encode()]);
  }
  async getFactoryContract() {
    if (this.factoryContract) {
      return this.factoryContract;
    }
    if (this.params.factoryInfo?.abi) {
      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);
    } else {
      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);
    }
    return this.factoryContract;
  }
  async getCounterFactualAddress() {
    if (this.params.accountAddress) {
      return this.params.accountAddress;
    }
    const factory = await this.getFactoryContract();
    const localSigner = await this.params.localSigner.getAddress();
    return this.params.factoryInfo.getAccountAddress(factory, localSigner);
  }
  async getNonce() {
    if (await this.checkAccountPhantom()) {
      return ethers.BigNumber.from(0);
    }
    const accountContract = await this.getAccountContract();
    return this.params.accountInfo.getNonce(accountContract);
  }
  async prepareExecute(target, value, data) {
    const accountContract = await this.getAccountContract();
    return this.params.accountInfo.execute(accountContract, target, value, data);
  }
  async prepareExecuteBatch(targets, values, datas) {
    const accountContract = await this.getAccountContract();
    return accountContract.prepare("executeBatch", [targets, values, datas]);
  }
  async signUserOpHash(userOpHash) {
    return await this.params.localSigner.signMessage(ethers.utils.arrayify(userOpHash));
  }
  async isAcountDeployed() {
    return !(await this.checkAccountPhantom());
  }
}

class SmartWalletConnector extends connector.Connector {
  constructor(config) {
    super();
    this.config = config;
  }
  async initialize(params) {
    const config = this.config;
    const originalProvider = sdk$1.getChainProvider(config.chain, {
      clientId: config.clientId,
      secretKey: config.secretKey
    });
    this.chainId = (await originalProvider.getNetwork()).chainId;
    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;
    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;
    const entryPointAddress = config.entryPointAddress || constants.ENTRYPOINT_ADDRESS;
    const localSigner = await params.personalWallet.getSigner();
    const providerConfig = {
      chain: config.chain,
      localSigner,
      entryPointAddress,
      bundlerUrl,
      paymasterAPI: this.config.gasless ? this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey) : undefined,
      factoryAddress: config.factoryAddress,
      accountAddress: params.accountAddress,
      factoryInfo: config.factoryInfo || this.defaultFactoryInfo(),
      accountInfo: config.accountInfo || this.defaultAccountInfo(),
      clientId: config.clientId,
      secretKey: config.secretKey
    };
    this.personalWallet = params.personalWallet;
    const accountApi = new AccountAPI(providerConfig, originalProvider);
    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);
    this.accountApi = accountApi;
  }
  async connect(connectionArgs) {
    await this.initialize(connectionArgs);
    return await this.getAddress();
  }
  getProvider() {
    if (!this.aaProvider) {
      throw new Error("Personal wallet not connected");
    }
    return Promise.resolve(this.aaProvider);
  }
  async getSigner() {
    if (!this.aaProvider) {
      throw new Error("Personal wallet not connected");
    }
    return Promise.resolve(this.aaProvider.getSigner());
  }
  async getAddress() {
    const signer = await this.getSigner();
    return signer.getAddress();
  }
  async isConnected() {
    try {
      const address = await this.getAddress();
      return !!address;
    } catch (e) {
      return false;
    }
  }
  async disconnect() {
    this.personalWallet = undefined;
    this.aaProvider = undefined;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars

  async switchChain(chainId) {
    const provider = await this.getProvider();
    const currentChainId = (await provider.getNetwork()).chainId;
    if (currentChainId !== chainId) {
      // only throw if actually trying to switch chains
      throw new Error("Not supported.");
    }
  }
  setupListeners() {
    return Promise.resolve();
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  updateChains(chains) {}

  /**
   * Check whether the connected signer can execute a given transaction using the smart wallet.
   * @param transaction - the transaction to execute using the smart wallet.
   * @returns whether the connected signer can execute the transaction using the smart wallet.
   */
  async hasPermissionToExecute(transaction) {
    const accountContract = await this.getAccountContract();
    const signer = await this.getSigner();
    const signerAddress = await signer.getAddress();
    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.ethers.utils.getAddress(item.signer) === ethers.ethers.utils.getAddress(signerAddress))[0]?.permissions;
    if (!restrictions) {
      return false;
    }
    return restrictions.approvedCallTargets.includes(transaction.getTarget());
  }

  /// PREPARED TRANSACTIONS

  /**
   * Send a single transaction without waiting for confirmations
   * @param transaction - the transaction to send
   * @returns the awaitable transaction
   */
  async send(transaction) {
    const signer = await this.getSigner();
    return signer.sendTransaction({
      to: transaction.getTarget(),
      data: transaction.encode(),
      value: await transaction.getValue()
    });
  }

  /**
   * Execute a single transaction (waiting for confirmations)
   * @param transaction - the transaction to execute
   * @returns the transaction receipt
   */
  async execute(transaction) {
    const tx = await this.send(transaction);
    const receipt = await tx.wait();
    return {
      receipt
    };
  }
  async sendBatch(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const signer = await this.getSigner();
    const {
      tx,
      batchData
    } = await this.prepareBatchTx(transactions);
    return await signer.sendTransaction({
      to: await signer.getAddress(),
      data: tx.encode(),
      value: 0
    }, batchData);
  }

  /**
   * Execute multiple transactions in a single batch
   * @param transactions - the transactions to execute
   * @returns the transaction receipt
   */
  async executeBatch(transactions) {
    const tx = await this.sendBatch(transactions);
    const receipt = await tx.wait();
    return {
      receipt
    };
  }

  /// RAW TRANSACTIONS

  async sendRaw(transaction) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const signer = await this.getSigner();
    return signer.sendTransaction(transaction);
  }
  async executeRaw(transaction) {
    const tx = await this.sendRaw(transaction);
    const receipt = await tx.wait();
    return {
      receipt
    };
  }
  async sendBatchRaw(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const signer = await this.getSigner();
    const batch = await this.prepareBatchRaw(transactions);
    return signer.sendTransaction({
      to: await signer.getAddress(),
      data: batch.tx.encode(),
      value: 0
    }, batch.batchData // batched tx flag
    );
  }

  async executeBatchRaw(transactions) {
    const tx = await this.sendBatchRaw(transactions);
    const receipt = await tx.wait();
    return {
      receipt
    };
  }

  /// ESTIMATION

  async estimate(transaction) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    return this.estimateTx({
      target: transaction.getTarget(),
      data: transaction.encode(),
      value: await transaction.getValue()
    });
  }
  async estimateRaw(transaction) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const tx = await ethers.ethers.utils.resolveProperties(transaction);
    return this.estimateTx({
      target: tx.to || utils.AddressZero,
      data: tx.data?.toString() || "",
      value: tx.value || ethers.BigNumber.from(0)
    });
  }
  async estimateBatch(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const {
      tx,
      batchData
    } = await this.prepareBatchTx(transactions);
    return this.estimateTx({
      target: tx.getTarget(),
      data: tx.encode(),
      value: await tx.getValue()
    }, batchData);
  }
  async estimateBatchRaw(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const {
      tx,
      batchData
    } = await this.prepareBatchRaw(transactions);
    return this.estimateTx({
      target: tx.getTarget(),
      data: tx.encode(),
      value: await tx.getValue()
    }, batchData);
  }

  //// DEPLOYMENT

  /**
   * Manually deploy the smart wallet contract. If already deployed this will throw an error.
   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.
   * @returns the transaction receipt
   */
  async deploy() {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const signer = await this.getSigner();
    const tx = await signer.sendTransaction({
      to: await signer.getAddress(),
      data: "0x"
    }, {
      targets: [],
      data: []
    } // batched tx flag to avoid hitting the Router fallback method
    );

    const receipt = await tx.wait();
    return {
      receipt
    };
  }

  /**
   * Check if the smart wallet contract is deployed
   * @returns true if the smart wallet contract is deployed
   */
  async isDeployed() {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    return await this.accountApi.isAcountDeployed();
  }
  async deployIfNeeded() {
    const isDeployed = await this.isDeployed();
    if (!isDeployed) {
      await this.deploy();
    }
  }

  //// PERMISSIONS

  async grantPermissions(target, permissions) {
    await this.deployIfNeeded();
    const accountContract = await this.getAccountContract();
    return accountContract.account.grantPermissions(target, permissions);
  }
  async revokePermissions(target) {
    await this.deployIfNeeded();
    const accountContract = await this.getAccountContract();
    return accountContract.account.revokeAccess(target);
  }
  async addAdmin(target) {
    await this.deployIfNeeded();
    const accountContract = await this.getAccountContract();
    return accountContract.account.grantAdminPermissions(target);
  }
  async removeAdmin(target) {
    await this.deployIfNeeded();
    const accountContract = await this.getAccountContract();
    return accountContract.account.revokeAdminPermissions(target);
  }
  async getAllActiveSigners() {
    const isDeployed = await this.isDeployed();
    if (isDeployed) {
      const accountContract = await this.getAccountContract();
      return accountContract.account.getAllAdminsAndSigners();
    } else {
      const personalWallet = await this.personalWallet?.getSigner();
      if (!personalWallet) {
        throw new Error("Personal wallet not connected");
      }
      return [{
        isAdmin: true,
        signer: await personalWallet.getAddress(),
        permissions: {
          startDate: new Date(0),
          expirationDate: new Date(0),
          nativeTokenLimitPerTransaction: ethers.BigNumber.from(0),
          approvedCallTargets: []
        }
      }];
    }
  }

  /**
   * Get the underlying account contract of the smart wallet.
   * @returns the account contract of the smart wallet.
   */
  async getAccountContract() {
    const isDeployed = await this.isDeployed();
    if (!isDeployed) {
      throw new Error("Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.");
    }
    // getting a new instance everytime
    // to avoid caching issues pre/post deployment
    const sdk = sdk$1.ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {
      clientId: this.config.clientId,
      secretKey: this.config.secretKey
    });
    if (this.config.accountInfo?.abi) {
      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);
    } else {
      return sdk.getContract(await this.getAddress());
    }
  }

  /**
   * Get the underlying account factory contract of the smart wallet.
   * @returns the account factory contract.
   */
  async getFactoryContract() {
    const sdk = sdk$1.ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {
      clientId: this.config.clientId,
      secretKey: this.config.secretKey
    });
    if (this.config.factoryInfo?.abi) {
      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);
    }
    return sdk.getContract(this.config.factoryAddress);
  }
  defaultFactoryInfo() {
    return {
      createAccount: async (factory, owner) => {
        return factory.prepare("createAccount", [owner, ethers.ethers.utils.toUtf8Bytes("")]);
      },
      getAccountAddress: async (factory, owner) => {
        return await factory.call("getAddress", [owner, ethers.ethers.utils.toUtf8Bytes("")]);
      }
    };
  }
  defaultAccountInfo() {
    return {
      execute: async (account, target, value, data) => {
        return account.prepare("execute", [target, value, data]);
      },
      getNonce: async account => {
        return account.call("getNonce", []);
      }
    };
  }

  /// PRIVATE METHODS

  async estimateTx(tx, batchData) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    let deployGasLimit = ethers.BigNumber.from(0);
    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);
    if (!isDeployed) {
      deployGasLimit = await this.estimateDeploymentGasLimit();
    }
    const [{
      callGasLimit: transactionGasLimit
    }, gasPrice] = await Promise.all([this.accountApi.encodeUserOpCallDataAndGasLimit(tx, batchData), sdk$1.getGasPrice(provider)]);
    const transactionCost = transactionGasLimit.mul(gasPrice);
    const deployCost = deployGasLimit.mul(gasPrice);
    const totalCost = deployCost.add(transactionCost);
    return {
      ether: ethers.utils.formatEther(totalCost),
      wei: totalCost,
      details: {
        deployGasLimit,
        transactionGasLimit,
        gasPrice,
        transactionCost,
        deployCost,
        totalCost
      }
    };
  }
  async estimateDeploymentGasLimit() {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const initCode = await this.accountApi.getInitCode();
    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);
    return ethers.BigNumber.from(verificationGasLimit).add(initGas);
  }
  async prepareBatchRaw(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.ethers.utils.resolveProperties(transaction)));
    const targets = resolvedTxs.map(tx => tx.to || utils.AddressZero);
    const data = resolvedTxs.map(tx => tx.data || "0x");
    const values = resolvedTxs.map(tx => tx.value || ethers.BigNumber.from(0));
    return {
      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),
      batchData: {
        targets,
        data
      }
    };
  }
  async prepareBatchTx(transactions) {
    if (!this.accountApi) {
      throw new Error("Personal wallet not connected");
    }
    const targets = transactions.map(tx => tx.getTarget());
    const data = transactions.map(tx => tx.encode());
    const values = await Promise.all(transactions.map(tx => tx.getValue()));
    return {
      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),
      batchData: {
        targets,
        data
      }
    };
  }
}

exports.SmartWalletConnector = SmartWalletConnector;
